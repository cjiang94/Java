A README-file which contains:
1. An explanation of your algorithm and why it works. Use common sense
there, for instance, a lengthy repetition of the principles of Boyer-MooreHorspool
etc is not needed/wished. Concentrate on your solution and
highlight, if it helps understanding, special points of the code.

My algorithm works by:
  1) Reading in files that includes that needle and haystack. Suppose that there's
     no error in the files, and they exist(see TESTING beneath)
  2) Then it saves the needle and haystack into char-arrays which is being sent into
     the method called "boyer_moore_horspool".
  3) Inside the algorithm it does the following:
      - We start by making a substring of the needle without the last index,
        and checks if the needle includes a wildcard.
      - The algorithm for bad_char_shift is depending on the needle including a wildcard or not.
      - If the needle includes a wildcard, we need to change the values in bad_char_shift, for
        letters that are AFTER the wildcard. Otherwise every other letter will be given the value of
        the wildcards index.
      - If the needle does not include any wilcard, every other letter, that is not included in the needle,
        will be set as the needle.length in the bad_char_shift.
  4) Each time the algorithm finds a match, it will print out the index where it was found(forward and not backwards)
  5) The boyer_moore_horspool-algorithm keeps running till the end of the haystack.

2. How to compile your program (ie. javac *.java)
  javac Oblig3.java
  java Oblig3 <needle> <haystack>
3. Which file includes the main-method
  Oblig3.java
4. Any assumptions you have made when implementing the assignment
  I've changed the testfiles during the whole program to test different outcomes. So there is no test-files
  included in my delivery, but it's easy to make changes yourself in a testfile and send them in as arguments.
  I also copy pasted in different scenarioes beneath (see TESTING) for the outcomes of my own testing. 
5. Any peculiarities about your implementation
6. The status of your delivery (what works and what does not)
  Working... I guess...?
7. Give credit if your code is heavily influenced by some source (ie. teaching
material)
 My code was influenced by the lecture on 26th October by Ingrid Chieh Yu



======= TESTING =======

Testing: A file which not exists (nedle.txt haystack.txt)
Terminal:
Exception in thread "main" java.io.FileNotFoundException: nedle.txt (Systemet finner ikke angitt fil)

--------------------------------------------------------------------------------------------------------------------

Testing: needle.txt = fiskekakehhhkakeyy haystack.txt = kake
Terminal:
A match is found at index: 5
kake

A match is found at index: 12
kake

--------------------------------------------------------------------------------------------------------------------

Testing: Empty files. needle.txt is empty and/or haystack.txt is empty
Terminal:
Error: Needle-file is empty.
Error: Haystack-file is empty

--------------------------------------------------------------------------------------------------------------------

Testing: Wildcard(s) needle.txt = k_k haystack.txt = enfiskekakespiserkokos
Terminal:
A match is found at index: 5
kek

A match is found at index: 7
kak

A match is found at index: 17
kok

--------------------------------------------------------------------------------------------------------------------

Testing: Needle larger than haystack
Terminal: Error: Needle is larger than the haystack

--------------------------------------------------------------------------------------------------------------------

Testing: Needle being only one _     haystack.txt = fiskekake
Terminal:
A match is found at index: 0
f

A match is found at index: 1
i

A match is found at index: 2
s

A match is found at index: 3
k

A match is found at index: 4
e

A match is found at index: 5
k

A match is found at index: 6
a

A match is found at index: 7
k

A match is found at index: 8
e

--------------------------------------------------------------------------------------------------------------------

Testing: No match in haystack. Needle: lake Haystack: fiskekake
Terminal:
No match was found...
